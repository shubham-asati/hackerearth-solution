/*
Before jumping to the code:- 
  read this article first https://www.hackerearth.com/practice/data-structures/disjoint-data-strutures/basics-of-disjoint-data-structures/tutorial/
 the idea to solve this problem is to maintain a disjoint set with root element of a set being the maximum value number. 
  ex :  [0,1,2,3,4,5]
   union(2,3)
   arr := [0,1,3,3,4,5]
   union(5,3)
   arr[0,1,3,5,4,5]
   
   the logic of getting the root element remains same
  

*/
// Write your code here
package main
import(
    "fmt"
    "bufio"
    "os"
)
var reader *bufio.Reader=bufio.NewReader(os.Stdin)
func scanf(f string,args ...interface{}){fmt.Fscanf(reader,f,args...)}
func root(a int,arr[]int)int{
    i:=a
    for i != arr[i]{
        i=arr[arr[i]]
    }
    return i
}
func union(a,b int,arr[] int){
    rootA := root(a,arr)
    rootB := root(b,arr)
    if arr[rootA] > arr[rootB]{
        arr[rootB]=arr[rootA]
    }else{
        arr[rootA]=arr[rootB]
    }
}

func main(){
   var n,m int
   scanf("%d %d\n",&n,&m)
   arr := make([]int,n+1)
   for i:=1;i<=n;i++{
       arr[i]=i
   }
   for i:=0;i<m;i++{
       var a,b int
       scanf("%d %d\n",&a,&b)
       union(a,b,arr)
   }
   
   var q int
   scanf("%d\n",&q)
   for q > 0 {
       var a,b int
       scanf("%d %d\n",&a,&b)
       rootA := root(a,arr)
       rootB := root(b,arr)
       if rootA > rootB{
           fmt.Println(a)
       }else if rootB > rootA{
           fmt.Println(b)
       }else{
           fmt.Println("TIE")
       }
       q--
   }
}
